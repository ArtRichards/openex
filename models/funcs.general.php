<?phpfunction getToken($id,$ip){	$token = hash('sha256', $id.$ip.time());	if(!isset($_SESSION['tokens'])){	$_SESSION['tokens'] = array($token => 1);	}	else{	$_SESSION['tokens'][$token] = 1;	}	return $token;}function isTokenValid($token){	if(!empty($_SESSION['tokens'][$token])){	unset($_SESSION['tokens'][$token]);	return true;	}	return false;}function browsercheck_index() {	if(strpos($_SERVER['HTTP_USER_AGENT'], 'Chrome') !== FALSE) {	//ignore	}	elseif(strpos($_SERVER['HTTP_USER_AGENT'], 'Safari') !== FALSE) {	//ignore	}	elseif(strpos($_SERVER['HTTP_USER_AGENT'], 'Firefox') !== FALSE) {	//ignore	}else{		echo '<meta http-equiv="refresh" content="0; URL=browser_alert.php">';	}}function getuseragent(){	if(strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') == TRUE) {		$u_agent = "Internet Explorer";	}	elseif(strpos($_SERVER['HTTP_USER_AGENT'], 'Chrome') == TRUE) {		$u_agent = "Google Chrome";	}	elseif(strpos($_SERVER['HTTP_USER_AGENT'], 'Opera Mini') == TRUE) {		$u_agent = "Opera Mini";	}	elseif(strpos($_SERVER['HTTP_USER_AGENT'], 'Opera') == TRUE) {		$u_agent = "Opera";	}	elseif(strpos($_SERVER['HTTP_USER_AGENT'], 'Firefox/25.0') == TRUE) {		$u_agent = "Mozilla Firefox";	}	elseif(strpos($_SERVER['HTTP_USER_AGENT'], 'Safari') == TRUE) {		$u_agent = "Safari";	}	else { 		$u_agent = "Unknown/Other";	}		return $u_agent;}function gettime(){	{	$tmvari = date("F j, Y, g:i a");	}	return $tmvari;}function load_monit_init(){	$load = sys_getloadavg();	$sleep=5;	$maxload=2;	if ($load[0] > $maxload) {		   sleep($sleep);		echo "Busy server - sleep $sleep seconds<br>";	}}function TakeMoney($amount, $user, $currency, $fs=false){    $sell = @mysql_query("SELECT * FROM balances WHERE `User_ID`='$user' AND `Wallet_ID`='$currency'");    $id   = @mysql_result($sell, 0, "id");        $old = @mysql_result($sell, 0, "Amount");		echo "BR:$old";		        if ($old >= $amount) {            $new = $old - $amount;			$new = sprintf("%0.8f", $new);            mysql_query("UPDATE balances SET `Amount` = '$new' WHERE `User_ID` = '$user' AND `Wallet_ID` = '$currency';");            return true;        } else {		            return false;			        }}function moveToBalances($user_id,$amt,$coinname,$Wallet_Id) {					mysql_query("INSERT INTO balances (`User_Id`,`Amount`,`Coin`,`Pending`,`Wallet_ID`) VALUES ('$user_id','$amt','$coinname','0','$Wallet_Id') ");}function AddMoney($amount, $user, $currency){	$user_id = 0;	if(!is_numeric($user))	{		$user_sql = mysql_query("SELECT * FROM userCake_Users WHERE `Username_Clean`='$user'");		$user_id = mysql_result($user_sql,0,"User_ID");	}	else	{		$user_id = $user;	}	$acr = mysql_query("SELECT * FROM Wallets WHERE `Acronymn`='$currency' OR `Id`='$currency'");	$acr_id = mysql_result($acr,0,"Id");	$acr_acronymn = mysql_result($acr,0,"Acronymn");    $sell = mysql_query("SELECT * FROM balances WHERE `User_ID`='$user_id' AND `Wallet_ID`='$acr_id'");    $id   = mysql_result($sell, 0, "id");    if ($id < 1) {        mysql_query("INSERT INTO balances (`User_ID`,`Amount`,`Coin`,`Pending`,`Wallet_ID`) VALUES ('$user_id','$amount','$acr_acronymn','0','$acr_id');");    } else {	        $old = mysql_result($sell, 0, "Amount");        $new = $old + $amount;		if($user_id != -12)		{			$new = sprintf("%.8f", $new);		}		else		{			$new = sprintf("%.15f",$new);		}		//echo "UPDATE balances SET `Amount` = '$new' WHERE `User_ID` = '$user_id' AND `Wallet_ID` = '$acr_id';";		mysql_query("UPDATE balances SET `Amount` = '$new' WHERE `id`='$id'");    }}function GetPosts($thread){    $sql = mysql_query("SELECT * FROM TicketReplies WHERE `ticket_id` = '$thread'");    $num = @mysql_num_rows($sql);    $x   = 0;    for ($i = 0; $i < $num; $i++) {        $x = $x + 1;    }    return $x;    }function GetUser($owner){        $sql = mysql_query("SELECT * FROM userCake_Users WHERE `User_ID`=$owner");        return mysql_result($sql, 0, "Username_Clean");    }function sanitize($str){        return strtolower(strip_tags(trim(($str))));    }function isValidEmail($email){        return preg_match("/([\w\-]+\@[\w\-]+\.[\w\-]+)/", trim($email));    }function minMaxRange($min, $max, $what){        if (strlen(trim($what)) < $min)        return true;        else if (strlen(trim($what)) > $max)        return true;        else        return false;    }//@ Thanks to - http://phpsec.orgfunction generateHash($plainText, $salt = null){        if ($salt === null) {                $salt = substr(md5(uniqid(rand(), true)), 0, 25);            }        else {                $salt = substr($salt, 0, 25);            }                return $salt . hash('sha512', ($salt . $plainText));;    }function replaceDefaultHook($str){        global $default_hooks, $default_replace;                return (str_replace($default_hooks, $default_replace, $str));    }function getUniqueCode($length = ""){        $code = md5(uniqid(rand(), true));        if ($length != "")        return substr($code, 0, $length);        else        return $code;    }function errorBlock($errors){        if (!count($errors) > 0) {                return false;            }        else {        		echo '<hr class="five" /></br><div id="display-error"><img src="./assets/img/error.png" alt="Error" /><h4><b>ERROR:</b></h4><br/><ul class="nobullets">';                foreach ($errors as $error) {                        echo '<li>' . $error . '</li>';                    }        echo '</ul></div><br/><hr class="five"></br>';            }    }function successBlock($successes){        if (!count($successes) > 0) {                return false;            }        else {        		echo '<hr class="five" /></br><div id="display-success"><img src="./assets/img/correct.png" alt="Success" /><h4><b>SUCCESS:</b></h4><br/><ul class="nobullets">';                foreach ($successes as $success) {                        echo '<li>' . $success . '</li><br/><hr class="five" />';                    }        echo '</ul></div><br/><hr class="five"></br>';            }    }function lang($key, $markers = NULL){        global $lang;                if ($markers == NULL) {                $str = $lang[$key];            }        else {                //Replace any dyamic markers                $str = $lang[$key];                                $iteration = 1;                                foreach ($markers as $marker) {                        $str = str_replace("%m" . $iteration . "%", $marker, $str);                                                $iteration++;                    }            }                //Ensure we have something to return        if ($str == "") {                return ("No language key found");            }        else {                return $str;            }    }function destorySession($name){        if (isset($_SESSION[$name])) {                $_SESSION[$name] = NULL;                                unset($_SESSION[$name]);            }    }function getIP(){    foreach (array(        'HTTP_CLIENT_IP',        'HTTP_X_FORWARDED_FOR',        'HTTP_X_FORWARDED',        'HTTP_X_CLUSTER_CLIENT_IP',        'HTTP_FORWARDED_FOR',        'HTTP_FORWARDED',        'REMOTE_ADDR'    ) as $key) {        if (array_key_exists($key, $_SERVER) === true) {            foreach (array_map('trim', explode(',', $_SERVER[$key])) as $ip) {                if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) !== false) {                    return $ip;                }            }        }    }}function isTORnode() {	$ipvart = getIP(); //this is the users ip address we are testing	$filename = "models/torlist.csv"; //the list of tor nodes	$data = file_get_contents($filename); //get the list	if(strpos($data,$ipvart) != false)	return true;	else	return false;}function isIPbanned() {	$ipvars = mysql_real_escape_string(getIP());	$sqlxyzr = mysql_query("SELECT * FROM bantables_ip WHERE `ip`='$ipvars'");	if (mysql_num_rows($sqlxyzr) > 0) {		return true;	}else{		return false;	}}function strip_tags_recursive( $str, $allowable_tags = NULL ){    if ( is_array( $str ) )    {        $str = array_map( 'strip_tags_recursive', $str, array_fill( 0, count( $str ), $allowable_tags ) );    }    else    {        $str = strip_tags( $str, $allowable_tags );    }    return $str;} /*begin configuration functions*///httpsfunction forceSSL() {	if(empty($_SERVER["HTTPS"]) || $_SERVER["HTTPS"] !== "on") {		header("Location: https://" . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"]);		exit();	}}//registrationfunction isRegistrationDisabled() {	$sqlxzfk = mysql_query("SELECT * FROM  `config` WHERE  `name` = 'registration' LIMIT 1");	while($row = mysql_fetch_assoc($sqlxzfk)) {		if($row['setting'] == 1){			return true;		}else{			return false;		}	}}function display_Reg_message() {	$registration_message = "Registrations are currently disabled.</br>However you can login with a test username if you like.</br><h4>Test Users</h4><h5>format: user | pass </h5>";	$testnamepair1 ="<h6>testuser | password</h6>";	$testnamepair2 ="<h6>testmod | password</h6>";	echo $registration_message;	echo "<pre>";	echo $testnamepair1;	echo $testnamepair4;	echo $testnamepair2;	echo $testnamepair3;	echo "</pre>";}//loginfunction isLoginDisabled() {	$sqlxzfk = mysql_query("SELECT * FROM `config` WHERE `name` = 'login' LIMIT 1");	while($row = mysql_fetch_assoc($sqlxzfk)) {		if($row['setting'] == 1){			return true;		}else{			return false;		}	}}//depositfunction isDepositDisabled() {	$sqlxzfkn = mysql_query("SELECT * FROM `config` WHERE `name` = 'deposit' LIMIT 1");	while($row = mysql_fetch_assoc($sqlxzfkn)) {		if($row['setting'] == 1){			return true;		}else{			return false;		}	}}//withdrawfunction isWithdrawalDisabled() {	$sqlxzfkg = mysql_query("SELECT * FROM `config` WHERE `name` = 'withdrawal' LIMIT 1");	while($row = mysql_fetch_assoc($sqlxzfkg)) {		if($row['setting'] == 1){			return true;		}else{			return false;		}	}}//maintenancefunction isMaintenanceDisabled() {	$sqlxzfkgg = mysql_query("SELECT * FROM `config` WHERE `name` = 'maintenance' LIMIT 1");	while($row = mysql_fetch_assoc($sqlxzfkgg)) {		if($row['setting'] == 1){			return false;		}else{			return true;		}	}}function generateKey($id) {$api_select = mysql_query("SELECT * FROM userCake_Users WHERE `User_Id`='$id'");while($row = mysql_fetch_assoc($api_select)) {		$user = $row["Username"];		$pass = $row["Password"];		$length = 128;		$time = date("F j, Y, g:i a");		$salt1 = $time . hash('sha512', (sha1 .$time));		$salt2 = substr(md5(uniqid(rand(), true)), 0, 25);		$salt3 = substr(md5(uniqid(rand(), true)), 0, 25);		$salt4 = hash('sha256', (md5 .$time));		$user_hash = hash('sha512', ($salt2 . $user . $salt1));		$pass_hash = hash('sha512', ($salt1 . $pass . $salt2));		$keyhash_a = hash('sha512', ($user_hash . $salt3));		$keyhash_b = hash('sha512', ($pass_hash . $salt4));		$hash_a = str_split($keyhash_a);		$hash_b = str_split($keyhash_b);		foreach($hash_a as $key => $value) {			$hashed_a[] = $salt2 . hash('sha512', ($salt3 . $value)) . $salt1 . hash('sha256', ($salt4 . $key));		}		foreach($hash_a as $key => $value) {			$hashed_b[] = $salt2 . hash('sha512', ($salt3 . $value)) . $salt1 . hash('sha256', ($salt4 . $key));		}		$hash_merge = array_merge($hashed_b, $hashed_a);		$from_merge = implode($hash_merge);		$exploded_2 = str_split($from_merge);		$key_hash_last = implode($exploded_2);		$key0 = str_shuffle($key_hash_last);		$key1 = str_split($key0);		$key2 = array_unique($key1);		$key3 = implode($key2);		$key4 = str_shuffle($key3);		$key5 = str_shuffle($key4);		$api_key0 = str_shuffle($key3.$key4.$key5.$key2);		$keyf = mysql_real_escape_string($api_key0);	}		return $keyf;}?>